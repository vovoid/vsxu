#define yy_create_buffer gm_create_buffer
#define yy_delete_buffer gm_delete_buffer
#define yy_scan_buffer gm_scan_buffer
#define yy_scan_string gm_scan_string
#define yy_scan_bytes gm_scan_bytes
#define yy_flex_debug gm_flex_debug
#define yy_init_buffer gm_init_buffer
#define yy_flush_buffer gm_flush_buffer
#define yy_load_buffer_state gm_load_buffer_state
#define yy_switch_to_buffer gm_switch_to_buffer
#define yyin gmin
#define yyleng gmleng
#define yylex gmlex
#define yyout gmout
#define yyrestart gmrestart
#define yytext gmtext
#define yylineno gmlineno
#define yywrap gmwrap

#line 21 "gmScanner.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_NEVER_INTERACTIVE 1

#include <stdio.h>
#include <errno.h>


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif   /* __STDC__ */
#endif   /* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *    if ( condition_holds )
 *    yyless( 5 );
 * else
 *    do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
   do \
      { \
      /* Undo effects of setting up yytext. */ \
      *yy_cp = yy_hold_char; \
      yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
      YY_DO_BEFORE_ACTION; /* set up yytext again */ \
      } \
   while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
   {
   FILE *yy_input_file;

   char *yy_ch_buf;     /* input buffer */
   char *yy_buf_pos;    /* current position in input buffer */

   /* Size of input buffer in bytes, not including room for EOB
    * characters.
    */
   yy_size_t yy_buf_size;

   /* Number of characters read into yy_ch_buf, not including EOB
    * characters.
    */
   int yy_n_chars;

   /* Whether we "own" the buffer - i.e., we know we created it,
    * and can realloc() it to grow it, and should free() it to
    * delete it.
    */
   int yy_is_our_buffer;

   /* Whether this is an "interactive" input source; if so, and
    * if we're using stdio for input, then we want to use getc()
    * instead of fread(), to make sure we stop fetching input after
    * each newline.
    */
   int yy_is_interactive;

   /* Whether we're considered to be at the beginning of a line.
    * If so, '^' rules will be active on the next match, otherwise
    * not.
    */
   int yy_at_bol;

   /* Whether to try to fill the input buffer when we reach the
    * end of it.
    */
   int yy_fill_buffer;

   int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
   /* When an EOF's been seen but there's still some text to process
    * then we mark the buffer as YY_EOF_PENDING, to indicate that we
    * shouldn't try reading from the input source any more.  We might
    * still have a bunch of tokens to match, though, because of
    * possible backing-up.
    *
    * When we actually see the EOF, we change the status to "new"
    * (via yyrestart()), so that the user can continue scanning by
    * just pointing yyin at a new input file.
    */
#define YY_BUFFER_EOF_PENDING 2
   };

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;     /* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;    /* whether we need to initialize */
static int yy_start = 0;   /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
   { \
   if ( ! yy_current_buffer ) \
      yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
   yy_current_buffer->yy_is_interactive = is_interactive; \
   }

#define yy_set_bol(at_bol) \
   { \
   if ( ! yy_current_buffer ) \
      yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
   yy_current_buffer->yy_at_bol = at_bol; \
   }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
   yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
   yy_hold_char = *yy_cp; \
   *yy_cp = '\0'; \
   yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 78
#define YY_END_OF_BUFFER 79
static yyconst short int yy_acclist[280] =
    {   0,
       79,   77,   78,   76,   77,   78,   76,   78,   62,   77,
       78,   77,   78,   67,   77,   78,   70,   77,   78,   77,
       78,   57,   77,   78,   58,   77,   78,   65,   77,   78,
       64,   77,   78,   55,   77,   78,   63,   77,   78,   61,
       77,   78,   66,   77,   78,   27,   77,   78,   27,   77,
       78,   74,   75,   77,   78,   52,   77,   78,   68,   77,
       78,   56,   77,   78,   69,   77,   78,   24,   77,   78,
       59,   77,   78,   60,   77,   78,   72,   77,   78,   77,
       78,   24,   77,   78,   24,   77,   78,   24,   77,   78,
       24,   77,   78,   24,   77,   78,   24,   77,   78,   24,

       77,   78,   24,   77,   78,   24,   77,   78,   24,   77,
       78,   24,   77,   78,   24,   77,   78,   24,   77,   78,
       24,   77,   78,   24,   77,   78,   53,   77,   78,   71,
       77,   78,   54,   77,   78,   73,   77,   78,   51,   32,
       42,   34,   43,   40,   38,   39,   30,    1,    2,   41,
       31,   27,   47,   48,   50,   49,   46,   24,   45,   33,
       24,   24,   24,   24,   24,   24,   24,   24,   24,    8,
       24,   13,   24,   24,   24,   24,    7,   24,   24,   24,
       24,   24,   24,   44,   35,   28,   30,    2,   30,   31,
       31,   26,   29,   25,   37,   36,    6,   24,   24,   24,

       24,   24,   24,   11,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   30,   30,   31,   31,   29,
       24,   24,   24,    9,   24,   24,   24,   24,   24,   24,
       24,   17,   24,   24,   24,   21,   24,   22,   24,   24,
       30,   31,   15,   24,   24,   24,   23,   24,   24,   24,
       24,    3,   24,   24,   24,   20,   24,   10,   24,   24,
       24,   24,   24,    4,   24,    5,   24,   18,   24,   24,
       14,   24,   12,   24,   24,   16,   24,   19,   24
    } ;

static yyconst short int yy_accept[185] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   12,   14,   17,
       20,   22,   25,   28,   31,   34,   37,   40,   43,   46,
       49,   52,   56,   59,   62,   65,   68,   71,   74,   77,
       80,   82,   85,   88,   91,   94,   97,  100,  103,  106,
      109,  112,  115,  118,  121,  124,  127,  130,  133,  136,
      139,  140,  140,  141,  141,  142,  143,  144,  144,  144,
      145,  146,  147,  148,  149,  150,  151,  152,  153,  153,
      153,  153,  154,  155,  156,  157,  158,  159,  160,  160,
      161,  162,  163,  164,  165,  166,  167,  168,  169,  170,
      172,  174,  175,  176,  177,  179,  180,  181,  182,  183,

      184,  185,  186,  187,  187,  188,  189,  191,  191,  192,
      193,  193,  194,  195,  196,  197,  199,  200,  201,  202,
      203,  204,  206,  207,  208,  209,  210,  211,  212,  213,
      214,  215,  216,  216,  217,  217,  219,  219,  220,  221,
      222,  223,  224,  226,  227,  228,  229,  230,  231,  232,
      234,  235,  236,  238,  240,  241,  241,  243,  245,  246,
      247,  249,  250,  251,  252,  254,  255,  256,  258,  260,
      261,  262,  263,  264,  266,  268,  270,  271,  273,  275,
      276,  278,  280,  280
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    1,    1,   25,   26,   25,   25,   27,   28,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   30,   29,   29,
       31,   32,   33,   34,   29,   35,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   29,   45,   46,   47,   48,
       49,   29,   29,   50,   51,   52,   53,   29,   54,   30,
       29,   29,   55,   56,   57,   58,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[59] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    4,    4,    1,
        1,    1,    1,    1,    4,    4,    4,    4,    5,    5,
        1,    1,    1,    1,    1,    4,    4,    4,    4,    4,
        4,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[190] =
    {   0,
        0,    0,  292,  293,  293,  293,  268,   54,  267,   53,
      257,  293,  293,  265,  264,  293,  263,   44,   54,   72,
       54,  293,  293,   44,  262,   51,    0,  293,  293,  261,
      248,  234,  231,  231,  230,  232,   43,  231,   37,  227,
      235,  221,  223,  232,   57,  228,  293,   41,  293,  293,
      293,   63,  293,  267,  293,  293,  293,   72,   80,  293,
      293,  293,   96,  293,    0,  293,   99,  114,   88,  130,
        0,  246,  293,  293,  293,  245,    0,  293,  232,  231,
      226,  224,  215,  208,  210,  214,  209,  210,  208,    0,
        0,  218,  208,  205,    0,  188,  194,  186,  176,  184,

      293,  293,  293,  138,  293,    0,  141,  153,  293,   93,
      102,  145,    0,  293,  293,    0,  191,  174,  182,  184,
      172,  182,  183,  181,  181,  179,  169,  161,  167,  161,
      171,  160,  157,  160,  173,  293,  176,  179,  293,  160,
      156,  155,    0,  149,  148,  131,  144,  120,  121,    0,
      103,  111,    0,    0,  106,  185,  191,    0,   97,   97,
        0,  100,   91,   88,    0,   80,   80,    0,    0,   72,
       82,   65,   54,    0,    0,    0,   61,    0,    0,   36,
        0,    0,  293,  232,  237,  239,  244,  249,   78
    } ;

static yyconst short int yy_def[190] =
    {   0,
      183,    1,  183,  183,  183,  183,  183,  184,  183,  183,
      185,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  186,  183,  183,  183,
      187,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  183,  183,  183,  183,
      183,  184,  183,  184,  183,  183,  183,  185,  185,  183,
      183,  183,  183,  183,  188,  183,  183,  183,  183,  183,
      189,  183,  183,  183,  183,  183,  186,  183,  187,  183,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,

      183,  183,  183,  183,  183,  188,  183,  183,  183,  183,
      183,  183,  189,  183,  183,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  183,  183,  183,  183,  183,  183,  183,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  183,  183,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,    0,  183,  183,  183,  183,  183,  183
    } ;

static yyconst short int yy_nxt[352] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   22,
       23,   24,   25,   26,   27,   27,   27,   27,   27,   27,
       28,    4,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   27,   39,   27,   40,   41,   42,   43,   44,
       27,   45,   27,   46,   47,   48,   49,   50,   53,   56,
       63,   63,   63,  101,   64,   72,   73,   53,   67,   65,
       68,   68,   68,   75,   76,   57,   66,   90,   86,  103,
       70,  113,  183,  182,   91,   54,   67,   58,   68,   68,
       68,   87,   97,   70,   54,   88,  102,   69,   70,   98,

      181,   71,  180,   59,  110,  110,   99,  179,   69,  110,
      110,   70,   63,   63,   63,  107,  107,  107,  112,  112,
      112,  178,  104,  105,  177,  108,  109,  176,   67,  175,
       68,   68,   68,  174,  173,  104,  105,  172,  108,  109,
       70,  111,  171,  111,  170,  169,  112,  112,  112,  133,
      168,  133,  167,   70,  134,  134,  134,  107,  107,  107,
      166,  112,  112,  112,  137,  165,  137,  135,  136,  138,
      138,  138,  139,  134,  134,  134,  134,  134,  134,  164,
      135,  136,  163,  162,  156,  139,  156,  105,  161,  157,
      157,  157,  138,  138,  138,  138,  138,  138,  160,  159,

      105,  157,  157,  157,  158,  155,  109,  157,  157,  157,
      154,  153,  152,  151,  150,  149,  148,  147,  136,  109,
      146,  145,  144,  143,  142,  141,  140,  132,  131,  130,
      129,  136,   52,   52,   52,   52,   52,   58,   58,  128,
       58,   58,   77,   77,   79,   79,   79,   79,   79,  106,
      127,  106,  106,  106,  126,  125,  124,  123,  122,  121,
      120,  119,  118,  117,  116,   79,   80,  115,  114,  183,
      100,   96,   95,   94,   93,   92,   89,   85,   84,   83,
       82,   81,   80,   78,   74,   62,   61,   60,   59,   55,
       51,  183,    3,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183
    } ;

static yyconst short int yy_chk[352] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    8,   10,
       18,   18,   18,   48,   19,   24,   24,   52,   21,   19,
       21,   21,   21,   26,   26,   10,   19,   39,   37,   58,
       21,  189,   59,  180,   39,    8,   20,   59,   20,   20,
       20,   37,   45,   21,   52,   37,   48,   20,   20,   45,

      177,   20,  173,   58,   69,   69,   45,  172,   20,  110,
      110,   20,   63,   63,   63,   67,   67,   67,  111,  111,
      111,  171,   63,   63,  170,   67,   67,  167,   68,  166,
       68,   68,   68,  164,  163,   63,   63,  162,   67,   67,
       68,   70,  160,   70,  159,  155,   70,   70,   70,  104,
      152,  104,  151,   68,  104,  104,  104,  107,  107,  107,
      149,  112,  112,  112,  108,  148,  108,  107,  107,  108,
      108,  108,  112,  133,  133,  133,  134,  134,  134,  147,
      107,  107,  146,  145,  135,  112,  135,  134,  144,  135,
      135,  135,  137,  137,  137,  138,  138,  138,  142,  141,

      134,  156,  156,  156,  140,  132,  138,  157,  157,  157,
      131,  130,  129,  128,  127,  126,  125,  124,  157,  138,
      123,  122,  121,  120,  119,  118,  117,  100,   99,   98,
       97,  157,  184,  184,  184,  184,  184,  185,  185,   96,
      185,  185,  186,  186,  187,  187,  187,  187,  187,  188,
       94,  188,  188,  188,   93,   92,   89,   88,   87,   86,
       85,   84,   83,   82,   81,   80,   79,   76,   72,   54,
       46,   44,   43,   42,   41,   40,   38,   36,   35,   34,
       33,   32,   31,   30,   25,   17,   15,   14,   11,    9,
        7,    3,  183,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "gmScanner.l"
#define INITIAL 0
/*
    _____               __  ___          __            ____        _      __
   / ___/__ ___ _  ___ /  |/  /__  ___  / /_____ __ __/ __/_______(_)__  / /_
  / (_ / _ `/  ' \/ -_) /|_/ / _ \/ _ \/  '_/ -_) // /\ \/ __/ __/ / _ \/ __/
  \___/\_,_/_/_/_/\__/_/  /_/\___/_//_/_/\_\\__/\_, /___/\__/_/ /_/ .__/\__/
                                               /___/             /_/
                                             
  See Copyright Notice in gmMachine.h

*/
#line 22 "gmScanner.l"

#include <stdio.h>
#include "gmConfig.h"
#include "gmParser.cpp.h"

#line 569 "gmScanner.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
   {
   register yy_state_type yy_current_state;
   register char *yy_cp, *yy_bp;
   register int yy_act;

#line 29 "gmScanner.l"


#line 719 "gmScanner.cpp"

   if ( yy_init )
      {
      yy_init = 0;

#ifdef YY_USER_INIT
      YY_USER_INIT;
#endif

      if ( ! yy_start )
         yy_start = 1;  /* first start state */

      if ( ! yyin )
         yyin = stdin;

      if ( ! yyout )
         yyout = stdout;

      if ( ! yy_current_buffer )
         yy_current_buffer =
            yy_create_buffer( yyin, YY_BUF_SIZE );

      yy_load_buffer_state();
      }

   while ( 1 )    /* loops until end-of-file is reached */
      {
      yy_cp = yy_c_buf_p;

      /* Support of yytext. */
      *yy_cp = yy_hold_char;

      /* yy_bp points to the position in yy_ch_buf of the start of
       * the current run.
       */
      yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 184 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 293 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

      YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:  /* This label is used only to access EOF actions. */


      switch ( yy_act )
   { /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 31 "gmScanner.l"
{
            int c;

            while((c = yyinput()) != 0)
                {
                if(c == '*')
                    {
                    if((c = yyinput()) == '/')
                        break;
                    else
                        unput(c);
                    }
                }
            }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "gmScanner.l"
{ /* eat up comments */       }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "gmScanner.l"
{ return(KEYWORD_LOCAL);      }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "gmScanner.l"
{ return(KEYWORD_GLOBAL);     }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "gmScanner.l"
{ return(KEYWORD_MEMBER);     }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "gmScanner.l"
{ return(KEYWORD_AND);        }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "gmScanner.l"
{ return(KEYWORD_OR);         }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "gmScanner.l"
{ return(KEYWORD_IF);         }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "gmScanner.l"
{ return(KEYWORD_ELSE);       }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 55 "gmScanner.l"
{ return(KEYWORD_WHILE);      }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "gmScanner.l"
{ return(KEYWORD_FOR);        }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "gmScanner.l"
{ return(KEYWORD_FOREACH);    }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "gmScanner.l"
{ return(KEYWORD_IN);         }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "gmScanner.l"
{ return(KEYWORD_DOWHILE);    }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "gmScanner.l"
{ return(KEYWORD_BREAK);      }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "gmScanner.l"
{ return(KEYWORD_CONTINUE);   }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "gmScanner.l"
{ return(KEYWORD_NULL);       }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "gmScanner.l"
{ return(KEYWORD_RETURN);     }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "gmScanner.l"
{ return(KEYWORD_FUNCTION);   }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "gmScanner.l"
{ return(KEYWORD_TABLE);      }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 66 "gmScanner.l"
{ return(KEYWORD_THIS);       }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 67 "gmScanner.l"
{ return(KEYWORD_TRUE);       }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 68 "gmScanner.l"
{ return(KEYWORD_FALSE);      }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 70 "gmScanner.l"
{ return(IDENTIFIER);         }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 72 "gmScanner.l"
{ return(CONSTANT_HEX);       }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 73 "gmScanner.l"
{ return(CONSTANT_BINARY);    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 74 "gmScanner.l"
{ return(CONSTANT_INT);       }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 75 "gmScanner.l"
{ return(CONSTANT_CHAR);      }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 76 "gmScanner.l"
{ return(CONSTANT_FLOAT);     }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 77 "gmScanner.l"
{ return(CONSTANT_FLOAT);     }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 78 "gmScanner.l"
{ return(CONSTANT_FLOAT);     }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 79 "gmScanner.l"
{ return(CONSTANT_STRING);    }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 80 "gmScanner.l"
{ return(CONSTANT_STRING);    }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 82 "gmScanner.l"
{ return(KEYWORD_AND);        }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 83 "gmScanner.l"
{ return(KEYWORD_OR);         }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 84 "gmScanner.l"
{ return(SYMBOL_ASGN_BSR);    }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 85 "gmScanner.l"
{ return(SYMBOL_ASGN_BSL);    }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 86 "gmScanner.l"
{ return(SYMBOL_ASGN_ADD);    }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 87 "gmScanner.l"
{ return(SYMBOL_ASGN_MINUS);  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 88 "gmScanner.l"
{ return(SYMBOL_ASGN_TIMES);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 89 "gmScanner.l"
{ return(SYMBOL_ASGN_DIVIDE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 90 "gmScanner.l"
{ return(SYMBOL_ASGN_REM);    }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 91 "gmScanner.l"
{ return(SYMBOL_ASGN_BAND);   }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 92 "gmScanner.l"
{ return(SYMBOL_ASGN_BOR);    }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 93 "gmScanner.l"
{ return(SYMBOL_ASGN_BXOR);   }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 94 "gmScanner.l"
{ return(SYMBOL_RIGHT_SHIFT); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 95 "gmScanner.l"
{ return(SYMBOL_LEFT_SHIFT);  }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 96 "gmScanner.l"
{ return(SYMBOL_LTE);         }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 97 "gmScanner.l"
{ return(SYMBOL_GTE);         }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 98 "gmScanner.l"
{ return(SYMBOL_EQ);          }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 99 "gmScanner.l"
{ return(SYMBOL_NEQ);         }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 100 "gmScanner.l"
{ return(';');                }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 101 "gmScanner.l"
{ return('{');                }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 102 "gmScanner.l"
{ return('}');                }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 103 "gmScanner.l"
{ return(',');                }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 104 "gmScanner.l"
{ return('=');                }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 105 "gmScanner.l"
{ return('(');                }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 106 "gmScanner.l"
{ return(')');                }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 107 "gmScanner.l"
{ return('[');                }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 108 "gmScanner.l"
{ return(']');                }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 109 "gmScanner.l"
{ return('.');                }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 110 "gmScanner.l"
{ return('!');                }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 111 "gmScanner.l"
{ return('-');                }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 112 "gmScanner.l"
{ return('+');                }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 113 "gmScanner.l"
{ return('*');                }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 114 "gmScanner.l"
{ return('/');                }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 115 "gmScanner.l"
{ return('%');                }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 116 "gmScanner.l"
{ return('<');                }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 117 "gmScanner.l"
{ return('>');                }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 118 "gmScanner.l"
{ return('&');                }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 119 "gmScanner.l"
{ return('|');                }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 120 "gmScanner.l"
{ return('^');                }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 121 "gmScanner.l"
{ return('~');                }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 122 "gmScanner.l"
{ return(':');                }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 123 "gmScanner.l"
{ return(':');                }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 125 "gmScanner.l"
{                             }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 126 "gmScanner.l"
{ return(TOKEN_ERROR);        }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 128 "gmScanner.l"
ECHO;
	YY_BREAK
#line 1213 "gmScanner.cpp"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

   case YY_END_OF_BUFFER:
      {
      /* Amount of text matched not including the EOB char. */
      int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

      /* Undo the effects of YY_DO_BEFORE_ACTION. */
      *yy_cp = yy_hold_char;

      if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
         {
         /* We're scanning a new file or input source.  It's
          * possible that this happened because the user
          * just pointed yyin at a new source and called
          * yylex().  If so, then we have to assure
          * consistency between yy_current_buffer and our
          * globals.  Here is the right place to do so, because
          * this is the first action (other than possibly a
          * back-up) that will match for the new input source.
          */
         yy_n_chars = yy_current_buffer->yy_n_chars;
         yy_current_buffer->yy_input_file = yyin;
         yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
         }

      /* Note that here we test for yy_c_buf_p "<=" to the position
       * of the first EOB in the buffer, since yy_c_buf_p will
       * already have been incremented past the NUL character
       * (since all states make transitions on EOB to the
       * end-of-buffer state).  Contrast this with the test
       * in input().
       */
      if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
         { /* This was really a NUL. */
         yy_state_type yy_next_state;

         yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

         yy_current_state = yy_get_previous_state();

         /* Okay, we're now positioned to make the NUL
          * transition.  We couldn't have
          * yy_get_previous_state() go ahead and do it
          * for us because it doesn't know how to deal
          * with the possibility of jamming (and we don't
          * want to build jamming into it because then it
          * will run more slowly).
          */

         yy_next_state = yy_try_NUL_trans( yy_current_state );

         yy_bp = yytext_ptr + YY_MORE_ADJ;

         if ( yy_next_state )
            {
            /* Consume the NUL. */
            yy_cp = ++yy_c_buf_p;
            yy_current_state = yy_next_state;
            goto yy_match;
            }

         else
            {
				yy_cp = yy_c_buf_p;
            goto yy_find_action;
            }
         }

      else switch ( yy_get_next_buffer() )
         {
         case EOB_ACT_END_OF_FILE:
            {
            yy_did_buffer_switch_on_eof = 0;

            if ( yywrap() )
               {
               /* Note: because we've taken care in
                * yy_get_next_buffer() to have set up
                * yytext, we can now set up
                * yy_c_buf_p so that if some total
                * hoser (like flex itself) wants to
                * call the scanner after we return the
                * YY_NULL, it'll still work - another
                * YY_NULL will get returned.
                */
               yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

               yy_act = YY_STATE_EOF(YY_START);
               goto do_action;
               }

            else
               {
               if ( ! yy_did_buffer_switch_on_eof )
                  YY_NEW_FILE;
               }
            break;
            }

         case EOB_ACT_CONTINUE_SCAN:
            yy_c_buf_p =
               yytext_ptr + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state();

            yy_cp = yy_c_buf_p;
            yy_bp = yytext_ptr + YY_MORE_ADJ;
            goto yy_match;

         case EOB_ACT_LAST_MATCH:
            yy_c_buf_p =
            &yy_current_buffer->yy_ch_buf[yy_n_chars];

            yy_current_state = yy_get_previous_state();

            yy_cp = yy_c_buf_p;
            yy_bp = yytext_ptr + YY_MORE_ADJ;
            goto yy_find_action;
         }
      break;
      }

   default:
      YY_FATAL_ERROR(
         "fatal flex scanner internal error--no action found" );
   } /* end of action switch */
      } /* end of scanning one token */
   } /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 * EOB_ACT_LAST_MATCH -
 * EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 * EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
   {
   register char *dest = yy_current_buffer->yy_ch_buf;
   register char *source = yytext_ptr;
   register int number_to_move, i;
   int ret_val;

   if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
      YY_FATAL_ERROR(
      "fatal flex scanner internal error--end of buffer missed" );

   if ( yy_current_buffer->yy_fill_buffer == 0 )
      { /* Don't try to fill the buffer, so this is an EOF. */
      if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
         {
         /* We matched a singled characater, the EOB, so
          * treat this as a final EOF.
          */
         return EOB_ACT_END_OF_FILE;
         }

      else
         {
         /* We matched some text prior to the EOB, first
          * process it.
          */
         return EOB_ACT_LAST_MATCH;
         }
      }

   /* Try to read more data. */

   /* First move last chars to start of buffer. */
   number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

   for ( i = 0; i < number_to_move; ++i )
      *(dest++) = *(source++);

   if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
      /* don't do the read, it's not guaranteed to return an EOF,
       * just force an EOF
       */
      yy_n_chars = 0;

   else
      {
      int num_to_read =
         yy_current_buffer->yy_buf_size - number_to_move - 1;

      while ( num_to_read <= 0 )
         { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
         YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

         /* just a shorter name for the current buffer */
         YY_BUFFER_STATE b = yy_current_buffer;

         int yy_c_buf_p_offset =
            (int) (yy_c_buf_p - b->yy_ch_buf);

         if ( b->yy_is_our_buffer )
            {
            //_GD_
            int oldSize = b->yy_buf_size;

            int new_size = b->yy_buf_size * 2;

            if ( new_size <= 0 )
               b->yy_buf_size += b->yy_buf_size / 8;
            else
               b->yy_buf_size *= 2;

            /* Include room in for 2 EOB chars. */
            //_GD_ b->yy_ch_buf = (char *)
            //_GD_ yy_flex_realloc( (void *) b->yy_ch_buf,
            //_GD_       b->yy_buf_size + 2 );
            //_GD_
            void* newBytes = yy_flex_alloc( b->yy_buf_size + 2 );
            memcpy(newBytes, b->yy_ch_buf, oldSize));
            yy_flex_free(b->yy_ch_buf);
            b->yy_ch_buf = newBytes;
            }
         else
            /* Can't grow it, we don't own it. */
            b->yy_ch_buf = 0;

         if ( ! b->yy_ch_buf )
            YY_FATAL_ERROR(
            "fatal error - scanner input buffer overflow" );

         yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

         num_to_read = yy_current_buffer->yy_buf_size -
                  number_to_move - 1;
#endif
         }

      if ( num_to_read > YY_READ_BUF_SIZE )
         num_to_read = YY_READ_BUF_SIZE;

      /* Read in more data. */
      YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
         yy_n_chars, num_to_read );
      }

   if ( yy_n_chars == 0 )
      {
      if ( number_to_move == YY_MORE_ADJ )
         {
         ret_val = EOB_ACT_END_OF_FILE;
         yyrestart( yyin );
         }

      else
         {
         ret_val = EOB_ACT_LAST_MATCH;
         yy_current_buffer->yy_buffer_status =
            YY_BUFFER_EOF_PENDING;
         }
      }

   else
      ret_val = EOB_ACT_CONTINUE_SCAN;

   yy_n_chars += number_to_move;
   yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
   yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

   yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

   return ret_val;
   }


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
   {
   register yy_state_type yy_current_state;
   register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

   for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
      {
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 184 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
      }

   return yy_current_state;
   }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 * next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
   {
   register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 184 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	*yy_state_ptr++ = yy_current_state;
	yy_is_jam = (yy_current_state == 183);

   return yy_is_jam ? 0 : yy_current_state;
   }


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
   {
   register char *yy_cp = yy_c_buf_p;

   /* undo effects of setting up yytext */
   *yy_cp = yy_hold_char;

   if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
      { /* need to shift things up to make room */
      /* +2 for EOB chars. */
      register int number_to_move = yy_n_chars + 2;
      register char *dest = &yy_current_buffer->yy_ch_buf[
               yy_current_buffer->yy_buf_size + 2];
      register char *source =
            &yy_current_buffer->yy_ch_buf[number_to_move];

      while ( source > yy_current_buffer->yy_ch_buf )
         *--dest = *--source;

      yy_cp += (int) (dest - source);
      yy_bp += (int) (dest - source);
      yy_n_chars = yy_current_buffer->yy_buf_size;

      if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
         YY_FATAL_ERROR( "flex scanner push-back overflow" );
      }

   *--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

   yytext_ptr = yy_bp;
   yy_hold_char = *yy_cp;
   yy_c_buf_p = yy_cp;
   }
#endif   /* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
   {
   int c;

   *yy_c_buf_p = yy_hold_char;

   if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
      {
      /* yy_c_buf_p now points to the character we want to return.
       * If this occurs *before* the EOB characters, then it's a
       * valid NUL; if not, then we've hit the end of the buffer.
       */
      if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
         /* This was really a NUL. */
         *yy_c_buf_p = '\0';

      else
         { /* need more input */
         yytext_ptr = yy_c_buf_p;
         ++yy_c_buf_p;

         switch ( yy_get_next_buffer() )
            {
            case EOB_ACT_END_OF_FILE:
               {
               if ( yywrap() )
                  {
                  yy_c_buf_p =
                  yytext_ptr + YY_MORE_ADJ;
                  return EOF;
                  }

               if ( ! yy_did_buffer_switch_on_eof )
                  YY_NEW_FILE;
#ifdef __cplusplus
               return yyinput();
#else
               return input();
#endif
               }

            case EOB_ACT_CONTINUE_SCAN:
               yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
               break;

            case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
               YY_FATAL_ERROR(
               "unexpected last match in yyinput()" );
#else
               YY_FATAL_ERROR(
               "unexpected last match in input()" );
#endif
            }
         }
      }

   c = *(unsigned char *) yy_c_buf_p;  /* cast for 8-bit char's */
   *yy_c_buf_p = '\0';  /* preserve yytext */
   yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

   return c;
   }


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
   {
   if ( ! yy_current_buffer )
      yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

   yy_init_buffer( yy_current_buffer, input_file );
   yy_load_buffer_state();
   }


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
   {
   if ( yy_current_buffer == new_buffer )
      return;

   if ( yy_current_buffer )
      {
      /* Flush out information for old buffer. */
      *yy_c_buf_p = yy_hold_char;
      yy_current_buffer->yy_buf_pos = yy_c_buf_p;
      yy_current_buffer->yy_n_chars = yy_n_chars;
      }

   yy_current_buffer = new_buffer;
   yy_load_buffer_state();

   /* We don't actually know whether we did this switch during
    * EOF (yywrap()) processing, but the only time this flag
    * is looked at is after yywrap() is called, so it's safe
    * to go ahead and always set it.
    */
   yy_did_buffer_switch_on_eof = 1;
   }


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
   {
   yy_n_chars = yy_current_buffer->yy_n_chars;
   yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
   yyin = yy_current_buffer->yy_input_file;
   yy_hold_char = *yy_c_buf_p;
   }


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
   {
   YY_BUFFER_STATE b;

   b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
   if ( ! b )
      YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

   b->yy_buf_size = size;

   /* yy_ch_buf has to be 2 characters longer than the size given because
    * we need to put in 2 end-of-buffer characters.
    */
   b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
   if ( ! b->yy_ch_buf )
      YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

   b->yy_is_our_buffer = 1;

   yy_init_buffer( b, file );

   return b;
   }


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
   {
   if ( ! b )
      return;

   if ( b == yy_current_buffer )
      yy_current_buffer = (YY_BUFFER_STATE) 0;

   if ( b->yy_is_our_buffer )
      yy_flex_free( (void *) b->yy_ch_buf );

   yy_flex_free( (void *) b );
   }


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


   {
   yy_flush_buffer( b );

   b->yy_input_file = file;
   b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
   b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
   b->yy_is_interactive = 0;
#else
   b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
   }


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

   {
   b->yy_n_chars = 0;

   /* We always need two end-of-buffer characters.  The first causes
    * a transition to the end-of-buffer state.  The second causes
    * a jam in that state.
    */
   b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
   b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

   b->yy_buf_pos = &b->yy_ch_buf[0];

   b->yy_at_bol = 1;
   b->yy_buffer_status = YY_BUFFER_NEW;

   if ( b == yy_current_buffer )
      yy_load_buffer_state();
   }


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
   {
   YY_BUFFER_STATE b;

   if ( size < 2 ||
        base[size-2] != YY_END_OF_BUFFER_CHAR ||
        base[size-1] != YY_END_OF_BUFFER_CHAR )
      /* They forgot to leave room for the EOB's. */
      return 0;

   b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
   if ( ! b )
      YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

   b->yy_buf_size = size - 2; /* "- 2" to take care of EOB's */
   b->yy_buf_pos = b->yy_ch_buf = base;
   b->yy_is_our_buffer = 0;
   b->yy_input_file = 0;
   b->yy_n_chars = b->yy_buf_size;
   b->yy_is_interactive = 0;
   b->yy_at_bol = 1;
   b->yy_fill_buffer = 0;
   b->yy_buffer_status = YY_BUFFER_NEW;

   yy_switch_to_buffer( b );

   return b;
   }
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
   {
   int len;
   for ( len = 0; str[len]; ++len )
      ;

   return yy_scan_bytes( str, len );
   }
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
   {
   YY_BUFFER_STATE b;
   char *buf;
   yy_size_t n;
   int i;

   /* Get memory for full buffer, including space for trailing EOB's. */
   n = len + 2;
   buf = (char *) yy_flex_alloc( n );
   if ( ! buf )
      YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

   for ( i = 0; i < len; ++i )
      buf[i] = bytes[i];

   buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

   b = yy_scan_buffer( buf, n );
   if ( ! b )
      YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

   /* It's okay to grow etc. this buffer, and we should throw it
    * away when we're done.
    */
   b->yy_is_our_buffer = 1;

   return b;
   }
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
   {
   if ( yy_start_stack_ptr >= yy_start_stack_depth )
      {
      yy_size_t new_size;

      yy_start_stack_depth += YY_START_STACK_INCR;
      new_size = yy_start_stack_depth * sizeof( int );

      if ( ! yy_start_stack )
         yy_start_stack = (int *) yy_flex_alloc( new_size );

      else
         yy_start_stack = (int *) yy_flex_realloc(
               (void *) yy_start_stack, new_size );

      if ( ! yy_start_stack )
         YY_FATAL_ERROR(
         "out of memory expanding start-condition stack" );
      }

   yy_start_stack[yy_start_stack_ptr++] = YY_START;

   BEGIN(new_state);
   }
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
   {
   if ( --yy_start_stack_ptr < 0 )
      YY_FATAL_ERROR( "start-condition stack underflow" );

   BEGIN(yy_start_stack[yy_start_stack_ptr]);
   }
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
   {
   return yy_start_stack[yy_start_stack_ptr - 1];
   }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
   {
   (void) fprintf( stderr, "%s\n", msg );
   exit( YY_EXIT_FAILURE );
   }



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
   do \
      { \
      /* Undo effects of setting up yytext. */ \
      yytext[yyleng] = yy_hold_char; \
      yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
      yy_hold_char = *yy_c_buf_p; \
      *yy_c_buf_p = '\0'; \
      yyleng = n; \
      } \
   while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
   {
   register int i;
   for ( i = 0; i < n; ++i )
      s1[i] = s2[i];
   }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
   {
   //_GD_ return (void *) malloc( size );
   return (void *) GM_NEW( char [size] );
   }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
   {
   /* The cast to (char *) in the following accommodates both
    * implementations that use char* generic pointers, and those
    * that use void* generic pointers.  It works with the latter
    * because both ANSI C and C++ allow castless assignment from
    * any pointer type to void*, and deal with argument conversions
    * as though doing an assignment.
    */
   //_GD_ return (void *) realloc( (char *) ptr, size );
   }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
   {
   //_GD_ free( ptr );
   delete [] (char*) ptr;
   }

#if YY_MAIN
int main()
   {
   yylex();
   return 0;
   }
#endif
#line 128 "gmScanner.l"


// yywrap
int gmwrap()
{
  return(1);
}



